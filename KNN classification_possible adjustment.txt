My knn classification code:
### selects only ABV, IBU as explanatory variables and Style as response
all.ale <- completeData_J %>%select(ABV,IBU,Style)
write.csv(all.ale, 'C:\\Users\\olani\\OneDrive\\Documents\\Data Science\\SMU-Data Science\\Doing Data Science\\MSDS_6306_DDS\\all_ale_list.csv')
head(all.ale)



###the key difference here is adding IPA to the India Pale Ale variables
### this takes care of the 'overfitting issues: 
### India Pale Ale = 574; Other Ale = 1836

all.ale_recode2 = all.ale %>%mutate(Style_recode = ifelse(grepl("indi",Style, ignore.case=TRUE)|grepl(" IPA",Style, ignore.case=TRUE),"India Pale Ale","Other Ale"))
write.csv(all.ale_recode2, 'C:\\Users\\olani\\OneDrive\\Documents\\Data Science\\SMU-Data Science\\Doing Data Science\\MSDS_6306_DDS\\all_ale_recode_IPA.csv')
all.ale_recode2_count <- all.ale_recode2 %>% group_by(Style_recode) %>% summarize(count = n())


### another key difference 
### standardize. I used the z score to standardize. It brings BOTH variables to 
the same scale.

all.ale_recode2$Style_recode <- as.factor(all.ale_recode2$Style_recode) 

dfZTrain = data.frame(Z_ABV = scale(all.ale_recode2$ABV), Z_IBU = scale(all.ale_recode2$IBU), Style_recode = all.ale_recode2$Style_recode)



### Everything else is as normal from here on:
###Output: K=10 is the optimal: Accuracy = 81.6%, Sensitivity = 55%; Specificity = 90%


all.ale_recode2$Style_recode <- as.factor(all.ale_recode2$Style_recode)
all.ale_recode$Style_recode <- as.factor(all.ale_recode$Style_recode) 



set.seed(101)
splitPerc = .75
iterations = 150
numks = 90

masterAcc = matrix(nrow = iterations, ncol = numks)
  
for(j in 1:iterations)
{

trainIndices = sample(1:dim(all.ale_recode2)[1],round(splitPerc * dim(all.ale_recode2)[1]))
train = all.ale_recode2[trainIndices,]
test = all.ale_recode2[-trainIndices,]
for(i in 1:numks)
{
  classifications = knn(train[,c(1,2)],test[,c(1,2)],train$Style_recode, prob = TRUE, k = i)
  table(classifications,test$Style_recode)
  CM = confusionMatrix(table(classifications,test$Style_recode))
  masterAcc[j,i] = CM$overall[1]
}

}

MeanAcc = colMeans(masterAcc)

plot(seq(1,numks,1),MeanAcc, type = "l", main = "IPA recode Beer_Accuracy for k",ylab = "Mean Accuracies", xlab = "k")